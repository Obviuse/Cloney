<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NExtra.Web</name>
    </assembly>
    <members>
        <member name="T:NExtra.Web.Abstractions.ICanConvertHtml">
            <summary>
            This interface can be implemented by classes that
            should be able to convert HTML code in various ways.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanConvertHtml.ConvertHtml(System.String)">
            <summary>
            Convert the HTML code that exists within a certain string.
            </summary>
            <param name="str">The string of interest.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:NExtra.Web.SyndicationFeedLoader">
            <summary>
            This class can be used to load Syndication feeds (RSS
            feeds) from any URL, using the non-abstract, built-in
            System.ServiceModel.Syndication.SyndicationFeed class.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="T:NExtra.Web.Abstractions.ISyndicationFeedLoader">
            <summary>
            This interface can be implemented by classes that
            should be able to load syndication feeds, aka RSS.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Abstractions.ISyndicationFeedLoader.Load(System.String)">
            <summary>
            Load a feed from a certain URL.
            </summary>
            <param name="url">The URL of the feed.</param>
            <returns>The resulting feed instance.</returns>
        </member>
        <member name="M:NExtra.Web.SyndicationFeedLoader.Load(System.String)">
            <summary>Load a syndication feed from any public URL.</summary>
            <param name="url">The URL of interest.</param>
            <returns>The resulting syndication feed instance.</returns>
        </member>
        <member name="T:NExtra.Web.Html5ElementConverter">
            <summary>
            This class can convert HTML5 elements to div and span
            elements. The original HTML5 element name is added as
            a class name for each converted element.
            
            The class needs improvement. It now adds the class to
            the end tag of the replaced element as well, and also
            ignores any additional classes that the tag may have.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
            <todo>
            Improve the class as described in the class summary.
            </todo>
        </member>
        <member name="M:NExtra.Web.Html5ElementConverter.ConvertHtml(System.String)">
            <summary>
            Convert all HTML5 elements in a string to div and span elements.
            </summary>
            <param name="str">The original HTML5 string.</param>
            <returns>The resulting HTML5 free string.</returns>
        </member>
        <member name="T:NExtra.Web.Testing.FakeHttpContext">
            <summary>
             This class can be used as a fake HTTP context.
            </summary>
        </member>
        <member name="P:NExtra.Web.Testing.FakeHttpContext.Request">
            <summary>
            The HTTP request being used.
            </summary>
        </member>
        <member name="P:NExtra.Web.Testing.FakeHttpContext.User">
            <summary>
            The principal being used.
            </summary>
        </member>
        <member name="T:NExtra.Web.Testing.FakeMembershipUser">
            <summary>
            This class inherits MembershipUser and can be
            used to create membership user instances that
            can be used in, for instance, test context.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="T:NExtra.Web.Security.MembershipService">
            <summary>
            This class implements IMembershipService and can be used as a
            facade for the Membership class. It provides methods for both
            the Membership class as well as for the MembershipUser class.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="T:NExtra.Web.Security.Abstractions.IMembershipService">
            <summary>
            This interface can be implemented by classes that
            should be able to provide membership services.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.ChangePassword(System.Web.Security.MembershipUser,System.String,System.String)">
            <summary>
            Change the password of a certain user.
            </summary>
            <param name="user">The user of interest.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>Whether or not the password changed.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.CreateUser(System.String,System.String)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.CreateUser(System.String,System.String,System.String)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <param name="passwordQuestion">The user's password question.</param>
            <param name="passwordAnswer">The user's password answer.</param>
            <param name="isApproved">Whether or not the user should be approved from start.</param>
            <param name="status">A status indicating if the user could be created or, if not, why the crewation failed.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <param name="passwordQuestion">The user's password question.</param>
            <param name="passwordAnswer">The user's password answer.</param>
            <param name="isApproved">Whether or not the user should be approved from start.</param>
            <param name="providerUserKey">Membership provider user key.</param>
            <param name="status">A status indicating if the user could be created or, if not, why the crewation failed.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.CreateUser(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <param name="isApproved">Whether or not the user should be approved from start.</param>
            <returns>The creation result.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.DeleteUser(System.String)">
            <summary>
            Delete a certain user.
            </summary>
            <param name="userName">The name of the user to delete.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.DeleteUser(System.String,System.Boolean)">
            <summary>
            Delete a certain user.
            </summary>
            <param name="userName">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">Whether or not to delete all related data for the user.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.FindUsersByName(System.String)">
            <summary>
            Get membership users by user name.
            </summary>
            <param name="userNameToMatch">The user name to search for.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get membership users by user name.
            </summary>
            <param name="userNameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page to return.</param>
            <param name="pageSize">The max amount of hits per page.</param>
            <param name="totalRecords">The total numbers of matched users.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.FindUsersByEmail(System.String)">
            <summary>
            Get membership users by user e-mail.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get membership users by user Email.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page to return.</param>
            <param name="pageSize">The max amount of hits per page.</param>
            <param name="totalRecords">The total numbers of matched users.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GeneratePassword(System.Int32,System.Int32)">
            <summary>
            Get membership users by user Email.
            </summary>
            <param name="length">The length of the password.</param>
            <param name="numberOfNonAlphanumericCharacters">The number of non-alphanumeric characters.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GetAllUsers">
            <summary>
            Get a collection with all existing users.
            </summary>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a collection with all existing users.
            </summary>
            <param name="pageIndex">The index of the page to return.</param>
            <param name="pageSize">The max amount of hits per page.</param>
            <param name="totalRecords">The total numbers of matched users.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GetUser">
            <summary>
            Get the currently logged in user.
            </summary>
            <returns>The currently logged in user.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GetUser(System.Boolean)">
            <summary>
            Get the currently logged in user.
            </summary>
            <param name="userIsOnline">Whether or not the user is currently online..</param>
            <returns>The currently logged in user.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GetUser(System.String)">
            <summary>
            Get a certain user.
            </summary>
            <param name="userName">The user name.</param>
            <returns>The corresponding user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GetUser(System.String,System.Boolean)">
            <summary>
            Get a certain user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="userIsOnline">Whether or not the user is currently online..</param>
            <returns>The corresponding user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.GetUserNameByEmail(System.String)">
            <summary>
            Get the user name for a certain e-mail address.
            </summary>
            <param name="email">The e-mail address of interest.</param>
            <returns>The corresponding user name, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.ResetPassword(System.Web.Security.MembershipUser)">
            <summary>
            Reset the password of a certain membership user.
            </summary>
            <param name="user">The user to affect.</param>
            <returns>The new, auto-generated password.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.ResetPassword(System.Web.Security.MembershipUser,System.String)">
            <summary>
            Reset the password of a certain membership user.
            </summary>
            <param name="user">The user to affect.</param>
            <param name="passwordAnswer">The password answer for the user.</param>
            <returns>The new, auto-generated password.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.Unlock(System.Web.Security.MembershipUser)">
            <summary>
            Unlock a certain user.
            </summary>
            <param name="user">The user to affect.</param>
            <returns>Whether or not the user was unlocked.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Update a certain user.
            </summary>
            <param name="user">The user to update.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.UserExists(System.String)">
            <summary>
            Check whether or not a certain user exists.
            </summary>
            <param name="userName">The user name of interest.</param>
            <returns>Whether or not the user exists.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IMembershipService.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that a user name and password are valid.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <returns>Whether or not the user name and password are valid</returns>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.ApplicationName">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.EnablePasswordReset">
            <summary>
            Whether or not it is possible to reset the password of a user.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.EnablePasswordRetrieval">
            <summary>
            Whether or not it is possible to retrieve the password of a user.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.HashAlgorithmType">
            <summary>
            The currently used hash algorithm.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.MaxInvalidPasswordAttempts">
            <summary>
            Get the max number of password attempts before the user is locked out.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.MinPasswordLength">
            <summary>
            The minimum amount of chars in a password.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.MinRequiredNonAlphanumericCharacters">
            <summary>
            Get the min number of required non-alphanumeric characters.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.PasswordStrengthRegularExpression">
            <summary>
            Get the password strength regular expression.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.Abstractions.IMembershipService.RequiresQuestionAndAnswer">
            <summary>
            Whether or not a question and answer is required when reseting and retrieving passwords.
            </summary>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.ChangePassword(System.Web.Security.MembershipUser,System.String,System.String)">
            <summary>
            Change the password of a certain user.
            </summary>
            <param name="user">The user of interest.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>Whether or not the password changed.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.CreateUser(System.String,System.String)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.CreateUser(System.String,System.String,System.String)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <param name="passwordQuestion">The user's password question.</param>
            <param name="passwordAnswer">The user's password answer.</param>
            <param name="isApproved">Whether or not the user should be approved from start.</param>
            <param name="status">A status indicating if the user could be created or, if not, why the crewation failed.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <param name="passwordQuestion">The user's password question.</param>
            <param name="passwordAnswer">The user's password answer.</param>
            <param name="isApproved">Whether or not the user should be approved from start.</param>
            <param name="providerUserKey">Membership provider user key.</param>
            <param name="status">A status indicating if the user could be created or, if not, why the crewation failed.</param>
            <returns>The created user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.CreateUser(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a new membership user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <param name="email">The user's e-mail address.</param>
            <param name="isApproved">Whether or not the user should be approved from start.</param>
            <returns>The creation result.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.DeleteUser(System.String)">
            <summary>
            Delete a certain user.
            </summary>
            <param name="userName">The name of the user to delete.</param>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.DeleteUser(System.String,System.Boolean)">
            <summary>
            Delete a certain user.
            </summary>
            <param name="userName">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">Whether or not to delete all related data for the user.</param>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.FindUsersByName(System.String)">
            <summary>
            Get membership users by user name.
            </summary>
            <param name="userNameToMatch">The user name to search for.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get membership users by user name.
            </summary>
            <param name="userNameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page to return.</param>
            <param name="pageSize">The max amount of hits per page.</param>
            <param name="totalRecords">The total numbers of matched users.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.FindUsersByEmail(System.String)">
            <summary>
            Get membership users by user e-mail.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get membership users by user Email.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page to return.</param>
            <param name="pageSize">The max amount of hits per page.</param>
            <param name="totalRecords">The total numbers of matched users.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GeneratePassword(System.Int32,System.Int32)">
            <summary>
            Get membership users by user Email.
            </summary>
            <param name="length">The length of the password.</param>
            <param name="numberOfNonAlphanumericCharacters">The number of non-alphanumeric characters.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetAllUsers">
            <summary>
            Get a collection with all existing users.
            </summary>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a collection with all existing users.
            </summary>
            <param name="pageIndex">The index of the page to return.</param>
            <param name="pageSize">The max amount of hits per page.</param>
            <param name="totalRecords">The total numbers of matched users.</param>
            <returns>The resulting membership user collection, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetNumbersOfUsersOnline">
            <summary>
            Get the number of currently online users.
            </summary>
            <returns>The number of currently online users.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetUser">
            <summary>
            Get the currently logged in user.
            </summary>
            <returns>The currently logged in user.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetUser(System.Boolean)">
            <summary>
            Get the currently logged in user.
            </summary>
            <param name="userIsOnline">If true, update the last activity date time for the user.</param>
            <returns>The currently logged in user.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetUser(System.String)">
            <summary>
            Get a certain user.
            </summary>
            <param name="userName">The user name.</param>
            <returns>The corresponding user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetUser(System.String,System.Boolean)">
            <summary>
            Get a certain user.
            </summary>
            <param name="userName">The user name.</param>
            <param name="userIsOnline">If true, update the last activity date time for the user.</param>
            <returns>The corresponding user, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.GetUserNameByEmail(System.String)">
            <summary>
            Get the user name for a certain e-mail address.
            </summary>
            <param name="email">The e-mail address of interest.</param>
            <returns>The corresponding user name, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.ResetPassword(System.Web.Security.MembershipUser)">
            <summary>
            Reset the password of a certain membership user.
            </summary>
            <param name="user">The user to affect.</param>
            <returns>The new, auto-generated password.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.ResetPassword(System.Web.Security.MembershipUser,System.String)">
            <summary>
            Reset the password of a certain membership user.
            </summary>
            <param name="user">The user to affect.</param>
            <param name="passwordAnswer">The password answer for the user.</param>
            <returns>The new, auto-generated password.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.Unlock(System.Web.Security.MembershipUser)">
            <summary>
            Unlock a certain user.
            </summary>
            <param name="user">The user to affect.</param>
            <returns>Whether or not the user was unlocked.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Update a certain user.
            </summary>
            <param name="user">The user to update.</param>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.UserExists(System.String)">
            <summary>
            Check whether or not a certain user exists.
            </summary>
            <param name="userName">The user name of interest.</param>
            <returns>Whether or not the user exists.</returns>
        </member>
        <member name="M:NExtra.Web.Security.MembershipService.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that a user name and password are valid.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The user password.</param>
            <returns>Whether or not the user name and password are valid</returns>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.ApplicationName">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.EnablePasswordReset">
            <summary>
            Whether or not it is possible to reset the password of a user.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.EnablePasswordRetrieval">
            <summary>
            Whether or not it is possible to retrieve the password of a user.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.HashAlgorithmType">
            <summary>
            The currently used hash algorithm.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.MaxInvalidPasswordAttempts">
            <summary>
            Get the max number of password attempts before the user is locked out.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.MinPasswordLength">
            <summary>
            Get the minimum required password length.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.MinRequiredNonAlphanumericCharacters">
            <summary>
            Get the min number of required non-alphanumeric characters.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.PasswordStrengthRegularExpression">
            <summary>
            Get the password strength regular expression.
            </summary>
        </member>
        <member name="P:NExtra.Web.Security.MembershipService.RequiresQuestionAndAnswer">
            <summary>
            Whether or not a question and answer is required when reseting and retrieving passwords.
            </summary>
        </member>
        <member name="T:NExtra.Web.HtmlRemover">
            <summary>
            This class can remove HTML elements in various ways,
            leaving only their content.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="T:NExtra.Web.Abstractions.ICanRemoveHtml">
            <summary>
            This interface can be implemented by classes that
            should be able to remove HTML code from strings.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanRemoveHtml.RemoveHtml(System.String)">
            <summary>
            Remove all HTML code within a string.
            </summary>
            <param name="str">The string of interest.</param>
            <returns>The resulting, HTML-free string.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanRemoveHtml.RemoveHtmlElement(System.String,System.String)">
            <summary>
            Remove all occurances of a certain elements within a string.
            </summary>
            <param name="str">The string of interest.</param>
            <param name="elementName">The name of the element to remove.</param>
            <returns>The resulting, element-free string.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanRemoveHtml.RemoveHtmlElements(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove all occurances of certain HTML elements within a string.
            </summary>
            <param name="str">The string of interest.</param>
            <param name="elementNames">The name of the elements to remove.</param>
            <returns>The resulting, element-free string.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanRemoveHtml.RemoveHtmlTableElements(System.String)">
            <summary>
            Remove all HTML table elements within a string.
            </summary>
            <param name="str">The string of interest.</param>
            <returns>The resulting table-free string.</returns>
        </member>
        <member name="M:NExtra.Web.HtmlRemover.RemoveHtml(System.String)">
            <summary>
            Remove all HTML within a certain string.
            </summary>
            <param name="str">The HTML string.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:NExtra.Web.HtmlRemover.RemoveHtmlElement(System.String,System.String)">
            <summary>
            Remove a certain HTML element from a certain string.
            </summary>
            <param name="str">The HTML string.</param>
            <param name="elementName">The name of the HTML element.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:NExtra.Web.HtmlRemover.RemoveHtmlElements(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove a set of HTML elements from a certain string.
            </summary>
            <param name="str">The HTML string.</param>
            <param name="elementNames">The a list of HTML element names.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:NExtra.Web.HtmlRemover.RemoveHtmlTableElements(System.String)">
            <summary>
            Remove all HTML table elements from a certain string.
            </summary>
            <param name="str">The HTML string.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="T:NExtra.Web.Security.Abstractions.IAuthenticationService">
            <summary>
            This interface can be implemented by classes that
            should be able to provide authentication services.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IAuthenticationService.SignIn(System.String,System.Boolean)">
            <summary>
            Sign in a certain user name.
            </summary>
            <param name="userName">The user name to sign in.</param>
            <param name="createPersistentCookie">Whether or not to create a persistent cookie.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IAuthenticationService.SignOut">
            <summary>
            Sign out the currently signed in user.
            </summary>
        </member>
        <member name="T:NExtra.Web.Security.Abstractions.IAuthenticationFacade">
            <summary>
            This class is deprecated.
            </summary>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IAuthenticationFacade.SignIn(System.String,System.Boolean)">
            <summary>
            Sign in a certain user name.
            </summary>
            <param name="userName">The user name to sign in.</param>
            <param name="createPersistentCookie">Whether or not to create a persistent cookie.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IAuthenticationFacade.SignOut">
            <summary>
            Sign out the currently signed in user.
            </summary>
        </member>
        <member name="T:NExtra.Web.HttpModules.Html5ElementConvertModule">
            <summary>
            This module can be used to automatically convert all HTML5
            elements to HTML4 elements if the browser does not support
            HTML5 elements.
            
            The module initializes a default Html5ElementConvertFilter
            instance, which is used to filter the HTML that is sent to
            the client. For now, you have to create a new module if it
            requires any custom implementations.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.HttpModules.Html5ElementConvertModule.Dispose">
            <summary>
            Dispose the module.
            </summary>
        </member>
        <member name="M:NExtra.Web.HttpModules.Html5ElementConvertModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize the module.
            </summary>
            <param name="application">The HTTP application to which the module should apply.</param>
        </member>
        <member name="M:NExtra.Web.HttpModules.Html5ElementConvertModule.application_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            This event is called when the application begins a request.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:NExtra.Web.Avatar.FacebookAvatarSize">
            <summary>
             This enum represents the available avatar sizes.
            </summary>
        </member>
        <member name="F:NExtra.Web.Avatar.FacebookAvatarSize.Small">
            <summary>
            A small 50x50 avatar.
            </summary>
        </member>
        <member name="F:NExtra.Web.Avatar.FacebookAvatarSize.Square">
            <summary>
            A square dimensioned avatar.
            </summary>
        </member>
        <member name="F:NExtra.Web.Avatar.FacebookAvatarSize.Large">
            <summary>
            A large avatar with a variable height.
            </summary>
        </member>
        <member name="T:NExtra.Web.Abstractions.ICanHandleCookies">
            <summary>
            This interface can be implemented by classes that
            should be able to handle cookies in various ways.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanHandleCookies.CookieExists(System.String)">
            <summary>
            Check whether a cookie exists.
            </summary>
            <param name="cookieName">The name of the cookie of interest.</param>
            <returns>Whether or not the cookie exists.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanHandleCookies.GetCookie(System.String)">
            <summary>
            Get a certain cookie.
            </summary>
            <param name="cookieName">The name of the cookie of interest.</param>
            <returns>The cookie, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanHandleCookies.GetCookieValue(System.String)">
            <summary>
            Get the value of a certain cookie.
            </summary>
            <param name="cookieName">The name of the cookie of interest.</param>
            <returns>The value of the cookie, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanHandleCookies.GetCookieValue``1(System.String)">
            <summary>
            Get the typed value of a certain cookie.
            </summary>
            <typeparam name="T">The type of data.</typeparam>
            <param name="cookieName">The name of the cookie of interest.</param>
            <returns>The value of the cookie, if any.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanHandleCookies.SetCookieValue(System.String,System.Object)">
            <summary>
            Set the value of a cookie.
            </summary>
            <param name="cookieName">The name of the cookie of interest.</param>
            <param name="data">The data to store in the cookie.</param>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanHandleCookies.SetCookieValue(System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Set the value of a cookie.
            </summary>
            <param name="cookieName">The name of the cookie of interest.</param>
            <param name="data">The data to store in the cookie.</param>
            <param name="expires">When the cookie data expires.</param>
        </member>
        <member name="T:NExtra.Web.Testing.FakeHttpRequest">
            <summary>
             This class can be used as a fake HTTP request.
            </summary>
        </member>
        <member name="M:NExtra.Web.Testing.FakeHttpRequest.#ctor">
            <summary>
             Create a default instance of the class, using
             http://foo.com as URL and being authenticated.
            </summary>
        </member>
        <member name="M:NExtra.Web.Testing.FakeHttpRequest.#ctor(System.String,System.Boolean)">
            <summary>
             Create a custom instance of the class.
            </summary>
            <param name="url">The fake URL to use.</param>
            <param name="isAuthenticated">Whether or not the request is authenticated.</param>
        </member>
        <member name="M:NExtra.Web.Testing.FakeHttpRequest.SetUrlReferrer(System.Uri)">
            <summary>
            Set a new value for the UrlReferrer property.
            </summary>
            <param name="newValue">The new value to set.</param>
        </member>
        <member name="P:NExtra.Web.Testing.FakeHttpRequest.IsAuthenticated">
            <summary>
            Whether or not the request is authenticated.
            </summary>
        </member>
        <member name="P:NExtra.Web.Testing.FakeHttpRequest.Url">
            <summary>
            The URL of the request.
            </summary>
        </member>
        <member name="P:NExtra.Web.Testing.FakeHttpRequest.UrlReferrer">
            <summary>
            The URL of the request.
            </summary>
        </member>
        <member name="T:NExtra.Web.Avatar.Gravatar">
            <summary>
            This class can be used to retrieve user avatars
            from Gravatar.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="T:NExtra.Web.Avatar.Abstractions.IAvatarService`1">
            <summary>
            This interface can be implemented by classes that
            should be able to provide avatar-related services.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
            <typeparam name="T">The type of the size attribute.</typeparam>
        </member>
        <member name="M:NExtra.Web.Avatar.Abstractions.IAvatarService`1.GetAvatarUrl(System.String)">
            <summary>
            Get the url of a user avatar.
            </summary>
            <param name="userName">The user name of interest.</param>
            <returns>The resulting url of the user avatar.</returns>
        </member>
        <member name="M:NExtra.Web.Avatar.Abstractions.IAvatarService`1.GetAvatarUrl(System.String,`0)">
            <summary>
            Get the url of a user avatar.
            </summary>
            <param name="userName">The user name of interest.</param>
            <param name="size">The avatar size.</param>
            <returns>The resulting url of the user avatar.</returns>
        </member>
        <member name="F:NExtra.Web.Avatar.Gravatar.BaseUrl">
            <summary>
            The pattern of gravatar avatar URLs.
            </summary>
        </member>
        <member name="M:NExtra.Web.Avatar.Gravatar.GetAvatarUrl(System.String)">
            <summary>
            Get the url of a user avatar.
            </summary>
            <param name="emailAddress">The e-mail address of interest.</param>
            <returns>The resulting url of the user avatar.</returns>
        </member>
        <member name="M:NExtra.Web.Avatar.Gravatar.GetAvatarUrl(System.String,System.Int32)">
            <summary>
            Get the url of a user avatar.
            </summary>
            <param name="emailAddress">The e-mail address of interest.</param>
            <param name="size">The avatar size.</param>
            <returns>The resulting url of the user avatar.</returns>
        </member>
        <member name="T:NExtra.Web.Security.Sha1Generator">
            <summary>
            This class can be used to generate SHA1 hash values.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.Sha1Generator.GenerateHashValue(System.Object)">
            <summary>
            Generate an SHA1 hash value.
            </summary>
            <param name="value">The object to create a hash value for.</param>
            <returns>The resulting hash value.</returns>
        </member>
        <member name="T:NExtra.Web.Security.Md5Generator">
            <summary>
            This class can be used to generate MD5 hash values.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.Md5Generator.GenerateHashValue(System.Object)">
            <summary>
            Generate an MD5 hash value for an object.
            </summary>
            <param name="value">The object to create a hash value for.</param>
            <returns>The resulting hash value.</returns>
        </member>
        <member name="T:NExtra.Web.Security.Abstractions.IRoleService">
            <summary>
            This interface can be implemented by classes that
            should be able to provide user role services.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.AddUserToRole(System.String,System.String,System.Boolean)">
            <summary>
            Add a certain role to a user.
            </summary>
            <param name="userName">The user name</param>
            <param name="role">The role to add.</param>
            <param name="createRole">Whether or not to create the role if it does not exist.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.GetAllRoles">
            <summary>
            Get a list of all existing roles.
            </summary>
            <returns>All existing roles.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.GetRolesForUser">
            <summary>
            Get a list of the roles that the currently logged-on user is in.
            </summary>
            <returns>A list of the roles that the currently logged-on user is in.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.GetRolesForUser(System.String)">
            <summary>
            Get a list of the roles that a certain user is in.
            </summary>
            <param name="userName">The user name of interest.</param>
            <returns>A list of the roles that the user is in.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.GetUsersInRole(System.String)">
            <summary>
            Get a list of users in a certain role.
            </summary>
            <param name="roleName">The role of interest.</param>
            <returns>A list of all the users in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.IsUserInRole(System.String)">
            <summary>
            Check whether or not the currently logged-on user is in a certain role.
            </summary>
            <param name="roleName">The name of the role to search in.</param>
            <returns>Whether or not the currently logged-on user is in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.IsUserInRole(System.String,System.String)">
            <summary>
            Check whether or not a certain user is in a certain role.
            </summary>
            <param name="userName">The name of the user to search for.</param>
            <param name="roleName">The name of the role to search in.</param>
            <returns>Whether or not the user is in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.RemoveUserFromRole(System.String,System.String)">
            <summary>
            Remove a certain user from a certain role.
            </summary>
            <param name="userName">The user to remove.</param>
            <param name="role">The role to remove the user from.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRoleService.RemoveUserFromRoles(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove a certain user from a certain role.
            </summary>
            <param name="userName">The user to remove.</param>
            <param name="roles">The roles to remove the user from.</param>
        </member>
        <member name="T:NExtra.Web.Security.Abstractions.IRolesFacade">
            <summary>
            This interface can be implemented by classes that
            should be able to provide user role services.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.AddUserToRole(System.String,System.String,System.Boolean)">
            <summary>
            Add a certain role to a user.
            </summary>
            <param name="userName">The user name</param>
            <param name="role">The role to add.</param>
            <param name="createRole">Whether or not to create the role if it does not exist.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.GetAllRoles">
            <summary>
            Get a list of all existing roles.
            </summary>
            <returns>All existing roles.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.GetRolesForUser">
            <summary>
            Get a list of the roles that the currently logged-on user is in.
            </summary>
            <returns>A list of the roles that the currently logged-on user is in.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.GetRolesForUser(System.String)">
            <summary>
            Get a list of the roles that a certain user is in.
            </summary>
            <param name="userName">The user name of interest.</param>
            <returns>A list of the roles that the user is in.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.GetUsersInRole(System.String)">
            <summary>
            Get a list of users in a certain role.
            </summary>
            <param name="roleName">The role of interest.</param>
            <returns>A list of all the users in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.IsUserInRole(System.String)">
            <summary>
            Check whether or not the currently logged-on user is in a certain role.
            </summary>
            <param name="roleName">The name of the role to search in.</param>
            <returns>Whether or not the currently logged-on user is in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.IsUserInRole(System.String,System.String)">
            <summary>
            Check whether or not a certain user is in a certain role.
            </summary>
            <param name="userName">The name of the user to search for.</param>
            <param name="roleName">The name of the role to search in.</param>
            <returns>Whether or not the user is in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.RemoveUserFromRole(System.String,System.String)">
            <summary>
            Remove a certain user from a certain role.
            </summary>
            <param name="userName">The user to remove.</param>
            <param name="role">The role to remove the user from.</param>
        </member>
        <member name="M:NExtra.Web.Security.Abstractions.IRolesFacade.RemoveUserFromRoles(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove a certain user from a certain role.
            </summary>
            <param name="userName">The user to remove.</param>
            <param name="roles">The roles to remove the user from.</param>
        </member>
        <member name="T:NExtra.Web.HttpContextCookieHandler">
            <summary>
            This class is a shortcut to working with cookies for the
            current HttpContext. It supports strongly typed data, so
            make sure to keep within the cookie size limit.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.HttpContextCookieHandler.CookieExists(System.String)">
            <summary>
            Check whether or not a certain cookie exists.
            </summary>
            <param name="cookieName">The name of the cookie.</param>
            <returns>Whether or not the cookie exists.</returns>
        </member>
        <member name="M:NExtra.Web.HttpContextCookieHandler.GetCookie(System.String)">
            <summary>
            Get a certain cookie.
            </summary>
            <param name="cookieName">The name of the cookie.</param>
            <returns>The cookie, if any.</returns>
        </member>
        <member name="M:NExtra.Web.HttpContextCookieHandler.GetCookieValue(System.String)">
            <summary>
            Get the string value of a certain cookie.
            </summary>
            <param name="cookieName">The name of the cookie.</param>
            <returns>The string value of the cookie.</returns>
        </member>
        <member name="M:NExtra.Web.HttpContextCookieHandler.GetCookieValue``1(System.String)">
            <summary>
            Get the value of a certain cookie.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="cookieName">The name of the cookie.</param>
            <returns>The string value of the cookie.</returns>
        </member>
        <member name="M:NExtra.Web.HttpContextCookieHandler.SetCookieValue(System.String,System.Object)">
            <summary>
            Add a cookie that expires together with the current session.
            </summary>
            <param name="cookieName">The name of the cookie.</param>
            <param name="data">The data to store in the cookie.</param>
        </member>
        <member name="M:NExtra.Web.HttpContextCookieHandler.SetCookieValue(System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Add a cookie with an optional expiration date.
            </summary>
            <param name="cookieName">The name of the cookie.</param>
            <param name="data">The data to store in the cookie.</param>
            <param name="expires">The optional date and time when the cookie expires.</param>
        </member>
        <member name="T:NExtra.Web.Extensions.StateBagExtensions">
            <summary>
            Extension methods for System.Web.UI.StateBag. These
            methods apply to every class that inherits StateBag,
            e.g. ViewState.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Extensions.StateBagExtensions.Get``1(System.Web.UI.StateBag,System.String,``0)">
            <summary>
            Retrieve an types value from a StateBag instance.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="stateBag">The StateBag instance of interest.</param>
            <param name="key">The key for the item.</param>
            <param name="fallbackValue">An optional fallback value, if the item would not exist.</param>
            <returns>Item or fallback value.</returns>
        </member>
        <member name="M:NExtra.Web.Extensions.StateBagExtensions.Set``1(System.Web.UI.StateBag,System.String,``0)">
            <summary>
            Add an item into a StateBag instance.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="stateBag">The StateBag instance of interest.</param>
            <param name="key">The key for the item.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:NExtra.Web.Abstractions.IVirtualPathProviderFacade">
            <summary>
            This interface can be implemented by classes that
            should be able to work with virtual paths.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Abstractions.IVirtualPathProviderFacade.GetFile(System.String)">
            <summary>
            Retrieve a virtual file.
            </summary>
            <param name="fileUrl">The URL of the virtual file.</param>
            <returns>The resulting virtual file.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.IVirtualPathProviderFacade.GetFileSize(System.String)">
            <summary>
            Get the size of a certain virtual file.
            </summary>
            <param name="fileUrl">The URL of the virtual file.</param>
            <returns>The size of the virtual file.</returns>
        </member>
        <member name="T:NExtra.Web.Security.RoleService">
            <summary>
            This class implements IRolesService and can
            be used as a facade for the static Roles class.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.AddUserToRole(System.String,System.String,System.Boolean)">
            <summary>
            Add a certain role to a user.
            </summary>
            <param name="userName">The user name</param>
            <param name="role">The role to add.</param>
            <param name="createRole">Whether or not to create the role if it does not exist.</param>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.GetAllRoles">
            <summary>
            Get a list of all the roles for the application.
            </summary>
            <returns>A list of all the roles for the application.</returns>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.GetRolesForUser">
            <summary>
            Get a list of the roles that the currently logged-on user is in.
            </summary>
            <returns>A list of the roles that the currently logged-on user is in.</returns>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.GetRolesForUser(System.String)">
            <summary>
            Get a list of the roles that a certain user is in.
            </summary>
            <param name="userName">The user name of interest.</param>
            <returns>A list of the roles that the user is in.</returns>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.GetUsersInRole(System.String)">
            <summary>
            Get a list of users in a certain role.
            </summary>
            <param name="roleName">The role of interest.</param>
            <returns>A list of all the users in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.IsUserInRole(System.String)">
            <summary>
            Check whether or not the currently logged-on user is in a certain role.
            </summary>
            <param name="roleName">The name of the role to search in.</param>
            <returns>Whether or not the currently logged-on user is in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.IsUserInRole(System.String,System.String)">
            <summary>
            Check whether or not a certain user is in a certain role.
            </summary>
            <param name="userName">The name of the user to search for.</param>
            <param name="roleName">The name of the role to search in.</param>
            <returns>Whether or not the user is in the role.</returns>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.RemoveUserFromRole(System.String,System.String)">
            <summary>
            Remove a certain user from a certain role.
            </summary>
            <param name="userName">The user to remove.</param>
            <param name="role">The role to remove the user from.</param>
        </member>
        <member name="M:NExtra.Web.Security.RoleService.RemoveUserFromRoles(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove a certain user from a certain role.
            </summary>
            <param name="userName">The user to remove.</param>
            <param name="roles">The roles to remove the user from.</param>
        </member>
        <member name="T:NExtra.Web.Security.FormsAuthenticationService">
            <summary>
            This class implements IAuthenticationFacade and can be
            used as a facade for the static FormsAuthentication class.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Security.FormsAuthenticationService.SignIn(System.String,System.Boolean)">
            <summary>
            Sign in a user.
            </summary>
            <param name="userName">User name.</param>
            <param name="createPersistentCookie">Whether or not the login should be persisted.</param>
        </member>
        <member name="M:NExtra.Web.Security.FormsAuthenticationService.SignOut">
            <summary>
            Sign out the currently logged in user.
            </summary>
        </member>
        <member name="T:NExtra.Web.HtmlReplacer">
            <summary>
            This class can replace HTML elements with another
            element type.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="T:NExtra.Web.Abstractions.ICanReplaceHtml">
            <summary>
            This interface can be implemented by classes that should
            be able to replace HTML element with another in a string.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanReplaceHtml.ReplaceHtmlElement(System.String,System.String,System.String)">
            <summary>
            Replace one HTML element with another one.
            </summary>
            <param name="str">The string of interest.</param>
            <param name="originalElementName">The original element name.</param>
            <param name="replacementElementName">The name of the replacing element.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:NExtra.Web.HtmlReplacer.ReplaceHtmlElement(System.String,System.String,System.String)">
            <summary>
            Replace one element type with another.
            </summary>
            <param name="str">The string to affect.</param>
            <param name="originalElementName">The original element name.</param>
            <param name="replacementElementName">The name of the element name.</param>
            <returns></returns>
        </member>
        <member name="T:NExtra.Web.ResponseFilters.Html5ElementConvertFilter">
            <summary>
            This filter can be used to automatically convert all HTML5
            elements withinin the client response to HTML4 elements if
            the current browser does not support HTML5 elements.
            
            To use the filter, apply it to the current response filter
            in global.asax, or using the Html5ElementConvertHttpModule.
            This filter will ONLY convert HTML5 elements if the output
            is generated by a Page or an MvcHandler and if the context
            does not support HTML5.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.#ctor(System.IO.Stream)">
            <summary>
            Create an instance of the class.
            </summary>
            <param name="baseStream">The stream to filter.</param>
        </member>
        <member name="M:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.#ctor(System.IO.Stream,NExtra.Web.Abstractions.ICanDetermineHtml5ElementSupport,NExtra.Web.Abstractions.ICanConvertHtml)">
            <summary>
            Create an instance of the class that uses custom
            implementations of ICanDetermineHtml5Support and
            ICanConvertHtml5Elements.
            </summary>
            <param name="baseStream">The stream to filter.</param>
            <param name="html5ElementSupport">The ICanDetermineHtml5Support implementation to use.</param>
            <param name="htmlConverter">The ICanConvertHtml5Elements implementation to use.</param>
        </member>
        <member name="M:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.Flush">
            <summary>
            Flush the generated output. This will write the resulting HTML
            code to the base stream and flush the stream.
            </summary>
        </member>
        <member name="M:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write buffer to the temp HTML string.  
            </summary>
        </member>
        <member name="M:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.SetLength(System.Int64)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.ConversionEnabled">
            <summary>
            Whether or not to convert HTML5 elements.
            </summary>
            <remarks>
            Only convert HTML5 elements if the handler is a page or an MVC
            handler and ONLY if the current browser does not support HTML5.
            </remarks>
        </member>
        <member name="P:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.CanRead">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.CanSeek">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.CanWrite">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.Length">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:NExtra.Web.ResponseFilters.Html5ElementConvertFilter.Position">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:NExtra.Web.Html5ElementSupport">
            <summary>
            This class can determine whether or not the current
            context or browser supports HTML5 elements like nav,
            section etc.
            
            For now, this class will return true if the current
            browser is NOT IE8 or below.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="T:NExtra.Web.Abstractions.ICanDetermineHtml5ElementSupport">
            <summary>
            This interface can be implemented by classes that
            should be able to determine whether or not HTML5
            is supported for various resources.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanDetermineHtml5ElementSupport.HasHtml5ElementSupport">
            <summary>
            Check whether or not HTML5 is supported.
            </summary>
            <returns>Whether or not HTML5 is supported.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanDetermineHtml5ElementSupport.HasHtml5ElementSupport(System.Web.HttpContext)">
            <summary>
            Check whether or not HTML5 is supported for a certain HTTP context.
            </summary>
            <param name="httpContext">The HTTP context of interest.</param>
            <returns>Whether or not HTML5 is supported for the HTTP context.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanDetermineHtml5ElementSupport.HasHtml5ElementSupport(System.Web.HttpBrowserCapabilities)">
            <summary>
            Check whether or not HTML5 is supported for a certain browser.
            </summary>
            <param name="browser">The browser of interest.</param>
            <returns>Whether or not HTML5 is supported for the browser.</returns>
        </member>
        <member name="M:NExtra.Web.Abstractions.ICanDetermineHtml5ElementSupport.HasHtml5ElementSupport(System.String,System.Version)">
            <summary>
            Check whether or not HTML5 is supported for a certain browser version.
            </summary>
            <param name="browserName">The name of the browser.</param>
            <param name="browserVersion">The browser version.</param>
            <returns>Whether or not HTML5 is supported for the browser version.</returns>
        </member>
        <member name="M:NExtra.Web.Html5ElementSupport.HasHtml5ElementSupport">
            <summary>
            Check whether or not the current HTTP context supports HTML5.
            </summary>
            <returns>Whether or not the current HTTP context supports HTML5.</returns>
        </member>
        <member name="M:NExtra.Web.Html5ElementSupport.HasHtml5ElementSupport(System.Web.HttpContext)">
            <summary>
            Check whether or not a certain HTTP context supports HTML5.
            </summary>
            <param name="httpContext">The HTTP context of interest.</param>
            <returns>Whether or not the HTTP context supports HTML5.</returns>
        </member>
        <member name="M:NExtra.Web.Html5ElementSupport.HasHtml5ElementSupport(System.Web.HttpBrowserCapabilities)">
            <summary>
            Check whether or not a certain browser supports HTML5.
            </summary>
            <param name="browser">The browser definition.</param>
            <returns>Whether or not the browser supports HTML5.</returns>
        </member>
        <member name="M:NExtra.Web.Html5ElementSupport.HasHtml5ElementSupport(System.String,System.Version)">
            <summary>
            Check whether or not a certain browser supports HTML5.
            </summary>
            <param name="browser">The browser definition.</param>
            <param name="browserVersion">The browser version.</param>
            <returns>Whether or not the browser supports HTML5.</returns>
        </member>
        <member name="T:NExtra.Web.Avatar.FacebookAvatar">
            <summary>
            This class can be used to retrieve user avatars
            from Facebook.
            </summary>
            <remarks>
            Author:     Daniel Saidi [daniel.saidi@gmail.com]
            Link:       http://www.saidi.se/nextra
            </remarks>
        </member>
        <member name="F:NExtra.Web.Avatar.FacebookAvatar.BaseUrl">
            <summary>
            The pattern of Facebook avatar URLs.
            </summary>
        </member>
        <member name="M:NExtra.Web.Avatar.FacebookAvatar.GetAvatarUrl(System.String)">
            <summary>
            Get the url of a user avatar.
            </summary>
            <param name="userName">The user name of interest.</param>
            <returns>The resulting url of the user avatar.</returns>
        </member>
        <member name="M:NExtra.Web.Avatar.FacebookAvatar.GetAvatarUrl(System.String,NExtra.Web.Avatar.FacebookAvatarSize)">
            <summary>
            Get the url of a user avatar.
            </summary>
            <param name="userName">The user name of interest.</param>
            <param name="size">The avatar size.</param>
            <returns>The resulting url of the user avatar.</returns>
        </member>
    </members>
</doc>
